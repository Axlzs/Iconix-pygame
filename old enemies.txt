enemies:
------------------------------------------------
================Load=enemy=images================
def load_images():

    enemy_sprite_sheet_image1 = pygame.image.load('images/enemy1.png').convert_alpha()
    enemy_sprite_sheet1 = spritesheet.SpriteSheet(enemy_sprite_sheet_image1)

    enemy_sprite_sheet_image2 = pygame.image.load('images/doux_upgrade.png').convert_alpha()
    enemy_sprite_sheet2 = spritesheet.SpriteSheet(enemy_sprite_sheet_image2)

    enemy_sprite_sheet_image3 = pygame.image.load('images/enemy2.png').convert_alpha()
    enemy_sprite_sheet3 = spritesheet.SpriteSheet(enemy_sprite_sheet_image3)


================Create=enemy=animation=list================
def create_enemy_animation_list(enemy_sprite_sheet):
    global enemy_animation_list, enemy_action, enemy_frame, enemy_step_counter, enemy_last_update, enemy_animation_cooldown
    enemy_animation_list = []
    enemy_animation_steps = [6]
    enemy_action = 0
    enemy_last_update = pygame.time.get_ticks()
    enemy_animation_cooldown = 100
    enemy_frame = 0
    enemy_step_counter = 0


    for enemy_animation in enemy_animation_steps:
        temp_img_list2 = []
        for _ in range(enemy_animation):
            temp_img_list2.append(enemy_sprite_sheet.get_image(enemy_step_counter, 32, 32, 4, BLACK))
            enemy_step_counter += 1
        enemy_animation_list.append(temp_img_list2)
    
    return enemy_animation_list


================Animation=list================
def initialise game():

    animation_list1 = create_enemy_animation_list(enemy_sprite_sheet1)
    animation_list2 = create_enemy_animation_list(enemy_sprite_sheet2)
    animation_list3 = create_enemy_animation_list(enemy_sprite_sheet3)


================Creating=USEREVENT================

PLAYER_HIT = pygame.USEREVENT + 1
ENEMY_HIT1 = pygame.USEREVENT + 2
ENEMY_HIT2 = pygame.USEREVENT + 3
ENEMY_HIT3 = pygame.USEREVENT + 4

ENEMY_HIT1_MELE = pygame.USEREVENT + 5
ENEMY_HIT2_MELE = pygame.USEREVENT + 6
ENEMY_HIT3_MELE = pygame.USEREVENT + 7

================Events================
def handle_events():
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYUP:
            last_lift_up = event.key
        elif event.type == PLAYER_HIT:
            player_health -= modifier
        elif event.type == ENEMY_HIT1:
            pygame.mixer.Channel(2).play(enemy_hit)
            enemy1_health -= 25
        elif event.type == ENEMY_HIT2:
            pygame.mixer.Channel(2).play(enemy_hit)
            enemy2_health -= 25
        elif event.type == ENEMY_HIT3:
            pygame.mixer.Channel(2).play(enemy_hit)
            enemy3_health -= 25

        elif event.type == ENEMY_HIT1_MELE:
            enemy1_health -= 1
        elif event.type == ENEMY_HIT2_MELE:
            enemy2_health -= 1
        elif event.type == ENEMY_HIT3_MELE:
            enemy3_health -= 1

================Update=enemy=animations================
def update_enemy_animation():
    global enemy_frame, enemy_last_update, enemy_animation_cooldown, enemy_action
    # Update enemy animations
    enemy_current_time = pygame.time.get_ticks()
    if enemy_current_time - enemy_last_update >= enemy_animation_cooldown:
        enemy_frame += 1
        enemy_last_update = enemy_current_time
        if enemy_frame >= len(enemy_animation_list[enemy_action]):
            enemy_frame = 0 

================Enemy=pathfinding================
# Enemy stuff
def enemy_pathfinding(enemy, player):
    global enemy_action
    global enemy_speed_linear, enemy_speed_diagonal

    # Adjust speed based on linear or diagonal movement
    if ((enemy.x > player.x) or (enemy.x < player.x)) and ((enemy.y > player.y) or (enemy.y < player.y)):
        enemy_speed = enemy_speed_diagonal  # Reduce speed for diagonal movement
    else:
        enemy_speed = enemy_speed_linear

    if player.x > enemy.x:
        enemy.x += enemy_speed
        enemy_action = 0
    if player.x < enemy.x:
        enemy.x -= enemy_speed
        enemy_action = 0
    if player.y > enemy.y:
        enemy.y += enemy_speed
    if player.y < enemy.y:
        enemy.y -= enemy_speed

def enemy_spawn(player):
    square_top_left_x = player.x - 500
    square_top_left_y = player.y - 400
    square_bottom_right_x = player.x + 500
    square_bottom_right_y = player.y + 400
    while True:
        # Generate random x and y coordinates outside the square
        x = random.uniform(square_top_left_x - 100, square_bottom_right_x + 100)
        y = random.uniform(square_top_left_y - 100, square_bottom_right_y + 100)
        
        # Check if the generated point is outside the square
        if x < square_top_left_x or x > square_bottom_right_x or y < square_top_left_y or y > square_bottom_right_y:
            return x, y

 
================draw=elements================
def draw_elements(enemy1, enemy2, enemy3, enemy_animation_list1, enemy_animation_list2, enemy_animation_list3, player_arrows_R, player_arrows_L, player_arrows_UP, player_arrows_DOWN):

    screen.blit(enemy_animation_list1[enemy_action][enemy_frame], (enemy1.x - camera_x - 26, enemy1.y - camera_y - 55))
    screen.blit(enemy_animation_list2[enemy_action][enemy_frame], (enemy2.x - camera_x - 26, enemy2.y - camera_y - 55))
    screen.blit(enemy_animation_list3[enemy_action][enemy_frame], (enemy3.x - camera_x - 26, enemy3.y - camera_y - 55))


    #ONLY FOR DEBUGGING ENEMY HITBOXES
    for enemy, enemy_animation_list in [(enemy1, enemy_animation_list1), (enemy2, enemy_animation_list2), (enemy3, enemy_animation_list3)]:
        pygame.draw.rect(screen, (255, 255, 0), (enemy.x - camera_x, enemy.y - camera_y, enemy.width, enemy.height), 2)


================player=damage=and=enemy=damage================
def player_damage(player, enemy1, enemy2, enemy3):
    if player.colliderect(enemy1):
        pygame.event.post(pygame.event.Event(PLAYER_HIT))
    if player.colliderect(enemy2):
        pygame.event.post(pygame.event.Event(PLAYER_HIT))
    if player.colliderect(enemy3):
        pygame.event.post(pygame.event.Event(PLAYER_HIT))

def enemy_damage(player, enemy1, enemy2, enemy3):
    if player.colliderect(enemy1):
        pygame.event.post(pygame.event.Event(ENEMY_HIT1_MELE))
    if player.colliderect(enemy2):
        pygame.event.post(pygame.event.Event(ENEMY_HIT2_MELE))
    if player.colliderect(enemy3):
        pygame.event.post(pygame.event.Event(ENEMY_HIT3_MELE))


================main================
def main_loop():
    enemy1_coordinate = enemy_spawn(player)
    enemy1_icon_x = enemy1_coordinate[0]
    enemy1_icon_y = enemy1_coordinate[1]
    enemy1_health = 50

    enemy2_coordinate = enemy_spawn(player)
    enemy2_icon_x = enemy2_coordinate[0]
    enemy2_icon_y = enemy2_coordinate[1]
    enemy2_health = 50

    enemy3_coordinate = enemy_spawn(player)
    enemy3_icon_x = enemy3_coordinate[0]
    enemy3_icon_y = enemy3_coordinate[1]
    enemy3_health = 50

    enemy1 = pygame.Rect(enemy1_icon_x, enemy1_icon_y, PLAYER_WIDTH/2,PLAYER_HEIGHT/2)
    enemy2 = pygame.Rect(enemy2_icon_x, enemy2_icon_y, PLAYER_WIDTH/2,PLAYER_HEIGHT/2)
    enemy3 = pygame.Rect(enemy3_icon_x, enemy3_icon_y, PLAYER_WIDTH/2,PLAYER_HEIGHT/2)


================main=while=running================
while running:

        if enemy1_health <= 0:
            if score % 15 == 0:
                generate_health_pickup(enemy1.x, enemy1.y)
            if score % 25 == 0 and score != 0:
                modifier += 0.4
                start_time = pygame.time.get_ticks()
                pygame.mixer.Channel(7).play(level_up)
                fade_text = "Enemies have leveled up!"
            score += 1
            enemy1_coordinate = enemy_spawn(player)
            enemy1_icon_x = enemy1_coordinate[0]
            enemy1_icon_y = enemy1_coordinate[1]
            enemy1_health = 50 * modifier
            enemy1 = pygame.Rect(enemy1_icon_x, enemy1_icon_y, PLAYER_WIDTH/2,PLAYER_HEIGHT/2)
        if enemy2_health <= 0:
            if score % 15 == 0:
                generate_health_pickup(enemy2.x, enemy2.y)
            if score % 25 == 0 and score != 0:
                modifier += 0.4
                start_time = pygame.time.get_ticks()
                pygame.mixer.Channel(7).play(level_up)
                fade_text = "Enemies have leveled up!"
            score +=1
            enemy2_coordinate = enemy_spawn(player)
            enemy2_icon_x = enemy2_coordinate[0]
            enemy2_icon_y = enemy2_coordinate[1]
            enemy2_health = 50 * modifier
            enemy2 = pygame.Rect(enemy2_icon_x, enemy2_icon_y, PLAYER_WIDTH/2,PLAYER_HEIGHT/2)
        if enemy3_health <= 0:
            if score % 15 == 0:
                generate_health_pickup(enemy3.x, enemy3.y)
            if score % 25 == 0 and score != 0:
                modifier += 0.4
                start_time = pygame.time.get_ticks()
                pygame.mixer.Channel(7).play(level_up)
                fade_text = "Enemies have leveled up!"
            score +=1
            enemy3_coordinate = enemy_spawn(player)
            enemy3_icon_x = enemy3_coordinate[0]
            enemy3_icon_y = enemy3_coordinate[1]
            enemy3_health = 50 * modifier
            enemy3 = pygame.Rect(enemy3_icon_x, enemy3_icon_y, PLAYER_WIDTH/2,PLAYER_HEIGHT/2)


        player_damage(player, enemy1, enemy2, enemy3)
        enemy_damage(player, enemy1, enemy2, enemy3)
        update_enemy_animation()
        enemy_pathfinding(enemy1, player)
        enemy_pathfinding(enemy2, player)
        enemy_pathfinding(enemy3, player)
